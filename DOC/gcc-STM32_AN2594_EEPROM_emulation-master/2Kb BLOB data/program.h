#ifndef PROGRAM_H
#define PROGRAM_H


//-------------------------------------
// Макроопределения
//-------------------------------------

//Внимание: изменение значений этих макроопределений приведет к изменению виртуальной адресации сохраняемых данных!
//Следовательно, все ранее сохраненные в энергонезависимую память данные - потеряются!

  
// Максимальное количество Шагов в Программе  (зависит от размера физической памяти в микроконтроллере, точнее от размера страницы FLASH)
#define PROGRAM_STEPS_COUNT  (EEPAGE_CHUNK_SIZE/4)

  
// Признак конца программы (значение пустой ячейки)
//  Концепция интерфейса: при изменении программы, при редактировании ячейки, когда оператор устанавливает время "на единицу меньше чем ноль" - ячейке присваивается значение 0xFFFF.
//  Обоснование: по-умолчанию, ячейки стертой FLASH памяти заполнены 0xFFFF. Таким образом, все ячейки ниже, что пользователь не отредактировал - будут считаться "концом программы".
#define PROGRAM_END   0xFFFF


// Максимально допустимое значение времени в ячейке программы (99 мин 59 сек)
#define PROGRAM_MAXIMUM_TIME  (99*60+59)



//-------------------------------------
// API модуля
//-------------------------------------


// Статистика по Текущей Программе (перерасчитывается при загрузке и редактировании программы)
typedef struct {
  uint32_t  TotalSec;       // Время всего (сек)
  uint16_t  TotalStep;      // Шагов всего (шт)
} TProgramStatistics;


// Перерассчитать Статистику по Текущей Программе
void Program_RefreshStatistics(void);

// Вернуть статистику по Текущей Программе
TProgramStatistics Program_GetStatistics(void);



// Загрузить данные Текущей Программы из FLASH в ОЗУ, и перерасчитать статистику...
HAL_StatusTypeDef Program_ReloadData(void);

// Сохранить данные Текущей Программы из ОЗУ во FLASH...
HAL_StatusTypeDef Program_SaveData(void);



// Получить ячейку данных Текущей Программы (только из ОЗУ)
//  STEP  = номер шага, начиная с единицы!
//  PHASE = фаза 0-мочим/1-сушим
uint16_t Program_GetData(uint16_t step, uint8_t phase);

// Сохранить ячейку данных Текущей Программы (только в ОЗУ)
void Program_SetData(uint16_t step, uint8_t phase, uint16_t value);


// Инкрементировать ячейку данных Текущей Программы (только в ОЗУ)
void Program_IncData(uint16_t step, uint8_t phase, uint16_t value);

// Декрементировать ячейку данных Текущей Программы (только в ОЗУ)
void Program_DecData(uint16_t step, uint8_t phase, uint16_t value);



#endif  // PROGRAM_H
